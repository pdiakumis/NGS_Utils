#!/usr/bin/env python
import os
import sys
from reference_data import api as refdata
from snakemake.utils import read_job_properties


# Read arguments
from ngs_utils.file_utils import safe_mkdir
args = sys.argv[1:]
timestamp = args[0]
logs_dir = args[1]
app_name = args[2] if len(args) >= 4 else 'snakemake'
wrapper_sh = sys.argv[-1].strip()
assert ' ' not in wrapper_sh, wrapper_sh

# Get submit command from reference_data/api.py
submit_cmd = ''
if refdata.cluster_cmd:
    submit_cmd = refdata.cluster_cmd

# Replace submit command wildcards with current job properties
job_properties = read_job_properties(wrapper_sh)
submit_cmd = submit_cmd\
    .replace('{threads}', str(max(job_properties.get('threads', 1), 48)))\
    .replace('{resources.mem_mb}', str(job_properties.get('resources', {}).get('mem_mb', 2000)))\
    .replace('{resources.disk_mb}', str(job_properties.get('resources', {}).get('disk_mb', 2000)))\
    .replace('{resources.hours}', str(job_properties.get('resources', {}).get('hours', 24)))

job_name = job_properties.get('rule') or job_properties.get('groupid') or app_name
if 'wildcards' in job_properties:
    wcs = job_properties['wildcards']
    if isinstance(wcs, list):
        values = wcs
    else:
        values = wcs.values()
    if values:
        job_name += '.' + '__'.join(values)

jobid = job_properties['jobid']
full_job_name = f'{timestamp}_{job_name}_{jobid}'
log_path = os.path.join(logs_dir, f'{full_job_name}.log')
submit_cmd = submit_cmd\
    .replace('{job_name}', job_name)\
    .replace('{log_file}', log_path)

# extending shell wrapper to print PATH variable
wrappers_dir = safe_mkdir(os.path.join(logs_dir, 'sh_wrappers'))
new_wrapper_sh = os.path.join(wrappers_dir, full_job_name + '.sh')
with open(wrapper_sh) as inp, open(new_wrapper_sh, 'w') as out:
    for l in inp:
        out.write(l)
        if l.startswith('export PATH='):
            out.write('(>&2 echo "PATH=$PATH")\n')

# Run submittion command
cmd = f'{submit_cmd} {new_wrapper_sh}'
sys.stderr.write(cmd + '\n')
os.system(cmd)



























